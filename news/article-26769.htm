<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://netchgithub.github.io/news/article-26769.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>pytorch数据批次的大小对模型拟合效果的影响</title>
        <meta name="description" content="本次使用大小为 [29995x30] 的数据集进行回归预测，研究设置不同的数据批次对模型拟合效果的影响。  过程： 1、导入数据 2、建立 XGBRegressor() 模型，计算均方误差。 3、建立" />
        <link rel="icon" href="/assets/website/img/netchgithub/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="manifest" href="site.webmanifest">
    <!-- CSS here -->
    <link rel="stylesheet" href="/assets/website/css/netchgithub/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/slicknav.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/themify-icons.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/slick.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/nice-select.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/style.css">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-WPZ6L4HTT1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-WPZ6L4HTT1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Preloader Start -->
    <div id="preloader-active">
        <div class="preloader d-flex align-items-center justify-content-center">
            <div class="preloader-inner position-relative">
                <div class="preloader-circle"></div>
                <div class="preloader-img pere-text">
                    <img src="/assets/website/img/netchgithub/logo/logo.png" alt="">
                </div>
            </div>
        </div>
    </div>
    <!-- Preloader Start -->
    <header>
        <!-- Header Start -->
        <div class="header-area header-transparrent ">
            <div class="main-header header-sticky">
                <div class="container">
                    <div class="row align-items-center">
                        <!-- Logo -->
                        <div class="col-md-4">
                            <div class="logo">
                                                                <a href="/">
                                    <span>Netch Github</span>
                                </a>
                                                            </div>
                        </div>
                        <div class="col-xl-8 col-lg-8 col-md-8">
                            <!-- Main-menu -->
                            <div class="main-menu f-right d-none d-lg-block">
                                <nav>
                                    <ul id="navigation">
                                                                                <li><a href="/"> 首页</a></li>
                                                                                <li><a href="/free-nodes/"> 免费节点</a></li>
                                                                                <li><a href="/paid-subscribe/"> 推荐机场</a></li>
                                                                                <li><a href="/news/"> 新闻资讯</a></li>
                                                                                <li><a href="#">关于</a></li>
                                        <li><a href="#">联系</a></li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                        <!-- Mobile Menu -->
                        <div class="col-12">
                            <div class="mobile_menu d-block d-lg-none"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Header End -->
    </header>
    <main>
        <!-- Slider Area Start-->
        <div class="services-area">
            <div class="container">
                <!-- Section-tittle -->
                <div class="row d-flex justify-content-center">
                    <div class="col-lg-8">
                        <div class="section-tittle text-center mb-80">
                            <h1>pytorch数据批次的大小对模型拟合效果的影响</h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Slider Area End-->
        <!-- We Create Start -->
        <div class="we-create-area create-padding">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>本次使用大小为 [29995x30] 的数据集进行回归预测，研究设置不同的数据批次对模型拟合效果的影响。</p> <h2> <a id="_1" rel="nofollow"></a>过程：</h2> <p>1、导入数据<br /> 2、建立 XGBRegressor() 模型，计算均方误差。<br /> 3、建立4个结构相同的深度学习模型，在相同的循环次数下设置不同的批次查看均方误差别，及训练批次和验证批次不同的情况下均方误差的的差别。</p> <h2> <a id="_6" rel="nofollow"></a>导入模块及数据：</h2> <pre><code class="prism language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">as</span> ps <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBRegressor <span class="token keyword">import</span> torch <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F <span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim <span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> TensorDataset <span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader  data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"finally_data.xlsx"</span><span class="token punctuation">)</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token string">'Unnamed: 0'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/9b8fab7509f9304c696c7d048384cdae.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <h2> <a id="_27" rel="nofollow"></a>数据处理</h2> <pre><code class="prism language-python"><span class="token comment">#划分数据和标签</span> train <span class="token operator">=</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token string">"二手车交易价格"</span><span class="token punctuation">)</span> target <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"二手车交易价格"</span><span class="token punctuation">]</span> scale_data <span class="token operator">=</span> ps<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token comment">#标准化</span> normalize_data <span class="token operator">=</span> ps<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span>train<span class="token punctuation">,</span>norm<span class="token operator">=</span><span class="token string">"l1"</span><span class="token punctuation">)</span><span class="token comment">#归一化</span> <span class="token comment">#划分训练集和测试集</span> xs_train<span class="token punctuation">,</span>xs_test<span class="token punctuation">,</span>ys_train<span class="token punctuation">,</span>ys_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>scale_data<span class="token punctuation">,</span>target<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span> xn_train<span class="token punctuation">,</span>xn_test<span class="token punctuation">,</span>yn_train<span class="token punctuation">,</span>yn_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>normalize_data<span class="token punctuation">,</span>target<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="xgboost_38" rel="nofollow"></a>xgboost建模</h2> <pre><code class="prism language-python"><span class="token comment">#标准化后的数据</span> xgb <span class="token operator">=</span> XGBRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span> xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xs_train<span class="token punctuation">,</span>ys_train<span class="token punctuation">)</span> train_predints <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xs_train<span class="token punctuation">)</span> test_predints <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xs_test<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s:"</span><span class="token punctuation">,</span>xgb<span class="token punctuation">.</span>score<span class="token punctuation">(</span>xs_test<span class="token punctuation">,</span>ys_test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#归一化后的数据</span> xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xn_train<span class="token punctuation">,</span>yn_train<span class="token punctuation">)</span> train_predintn <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xn_train<span class="token punctuation">)</span> test_predintn <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xn_test<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>xgb<span class="token punctuation">.</span>score<span class="token punctuation">(</span>xn_test<span class="token punctuation">,</span>yn_test<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_52" rel="nofollow"></a>模型评分</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/3cb4a0ccee467e83e7dbd8eccd5cb0b4.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <h2> <a id="_54" rel="nofollow"></a>计算误差</h2> <pre><code class="prism language-python"><span class="token comment">#平均误差</span> <span class="token keyword">def</span> <span class="token function">mse</span><span class="token punctuation">(</span>predict<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>     MSE <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>predict<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> MSE <span class="token comment">#均方误差</span> <span class="token keyword">def</span> <span class="token function">mse2</span><span class="token punctuation">(</span>predict<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>     MSE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>predict<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> MSE     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均误差："</span><span class="token punctuation">)</span> train_mess <span class="token operator">=</span> mse<span class="token punctuation">(</span>train_predints<span class="token punctuation">,</span>ys_train<span class="token punctuation">)</span> test_mess <span class="token operator">=</span> mse<span class="token punctuation">(</span>test_predints<span class="token punctuation">,</span>ys_test<span class="token punctuation">)</span>  train_mesn <span class="token operator">=</span> mse<span class="token punctuation">(</span>train_predintn<span class="token punctuation">,</span>yn_train<span class="token punctuation">)</span> test_mesn <span class="token operator">=</span> mse<span class="token punctuation">(</span>test_predintn<span class="token punctuation">,</span>yn_test<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"s:训练集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_mess<span class="token punctuation">}</span></span><span class="token string"> 测试集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>test_mess<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n:训练集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_mesn<span class="token punctuation">}</span></span><span class="token string"> 测试集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>test_mesn<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"均方误差："</span><span class="token punctuation">)</span> train_mess2 <span class="token operator">=</span> mse2<span class="token punctuation">(</span>train_predints<span class="token punctuation">,</span>ys_train<span class="token punctuation">)</span> test_mess2 <span class="token operator">=</span> mse2<span class="token punctuation">(</span>test_predints<span class="token punctuation">,</span>ys_test<span class="token punctuation">)</span>  train_mesn2 <span class="token operator">=</span> mse2<span class="token punctuation">(</span>train_predintn<span class="token punctuation">,</span>yn_train<span class="token punctuation">)</span> test_mesn2 <span class="token operator">=</span> mse2<span class="token punctuation">(</span>test_predintn<span class="token punctuation">,</span>yn_test<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"s:训练集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_mess2<span class="token punctuation">}</span></span><span class="token string"> 测试集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>test_mess2<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n:训练集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_mesn2<span class="token punctuation">}</span></span><span class="token string"> 测试集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>test_mesn2<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/69fa1c33309526930429cb6a2e17687e.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <h2> <a id="_86" rel="nofollow"></a>深度学习模型</h2> <pre><code class="prism language-python"><span class="token comment">#将数据类型转换为tensor</span> txs_train <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>xs_train<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> tys_train <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>ys_train<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> txs_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>xs_test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> tys_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>ys_test<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> <span class="token comment">#定义批次及设备</span> sample_train <span class="token operator">=</span> txs_train<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  sample_test <span class="token operator">=</span> txs_test<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> batch <span class="token operator">=</span> <span class="token number">64</span>    <span class="token comment">#最小批次</span> batch_big <span class="token operator">=</span> <span class="token number">1024</span>    <span class="token comment">#中间批次</span> batch_biggest <span class="token operator">=</span> sample_train    <span class="token comment">#最大批次</span> device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_101" rel="nofollow"></a>定义模型及训练</h2> <pre><code class="prism language-python"><span class="token comment"># 模型初始化：方法一</span> net0_model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>     nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  net0_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment">#定义损失函数及优化器</span> loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span> optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net0_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>  <span class="token comment"># 定义训练方法</span> <span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span>sample_train<span class="token punctuation">,</span>sample_test<span class="token punctuation">,</span>batch<span class="token punctuation">,</span>train_datas<span class="token punctuation">,</span>train_ys<span class="token punctuation">,</span>test_datas<span class="token punctuation">,</span>test_ys<span class="token punctuation">,</span>optimizer<span class="token punctuation">,</span>loss_fun<span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>device<span class="token punctuation">)</span><span class="token punctuation">:</span>     model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>     times_train <span class="token operator">=</span> sample_train <span class="token operator">//</span> batch <span class="token keyword">if</span> sample_train <span class="token operator">%</span> batch <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> sample_train <span class="token operator">//</span> batch <span class="token operator">+</span> <span class="token number">1</span>     train_loss <span class="token operator">=</span> <span class="token number">0.0</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>times_train<span class="token punctuation">)</span><span class="token punctuation">:</span>         start <span class="token operator">=</span> i <span class="token operator">*</span> batch         end <span class="token operator">=</span> start <span class="token operator">+</span> batch         train_x <span class="token operator">=</span> train_datas<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         train_y <span class="token operator">=</span> train_ys<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         output <span class="token operator">=</span> model<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span>         loss <span class="token operator">=</span> loss_fun<span class="token punctuation">(</span>output<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span>         train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>         loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>             <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"split_loss : {:.4f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch:{},\ntrain_loss:{:.4f}:"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span>train_loss<span class="token operator">/</span>times_train<span class="token punctuation">)</span><span class="token punctuation">)</span>              model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     test_loss <span class="token operator">=</span> <span class="token number">0.0</span>     times_test <span class="token operator">=</span> sample_test <span class="token operator">//</span> batch <span class="token keyword">if</span> sample_test <span class="token operator">%</span> batch <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> sample_test <span class="token operator">//</span> batch <span class="token operator">+</span> <span class="token number">1</span>     <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>times_test<span class="token punctuation">)</span><span class="token punctuation">:</span>             start <span class="token operator">=</span> i <span class="token operator">*</span> batch             end <span class="token operator">=</span> start <span class="token operator">+</span> batch             test_x <span class="token operator">=</span> test_datas<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>             test_y <span class="token operator">=</span> test_ys<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>             predict <span class="token operator">=</span> model<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>             test_loss <span class="token operator">+=</span> loss_fun<span class="token punctuation">(</span>predict<span class="token punctuation">,</span>test_y<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test_loss:{:.4f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_loss<span class="token operator">/</span>times_test<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">#最大批次(全部数据)计算</span> <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     train_model<span class="token punctuation">(</span>net0_model<span class="token punctuation">,</span>sample_train<span class="token punctuation">,</span>sample_test<span class="token punctuation">,</span>batch_biggest<span class="token punctuation">,</span>txs_train<span class="token punctuation">,</span>tys_train<span class="token punctuation">,</span>txs_test<span class="token punctuation">,</span>tys_test<span class="token punctuation">,</span>optimizer<span class="token punctuation">,</span>loss_function<span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>device<span class="token punctuation">)</span> </code></pre> <h2> <a id="_155" rel="nofollow"></a>结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/710b15d4354745b37adb04492cbf84bd.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <pre><code class="prism language-python"><span class="token comment"># 模型初始化：方法二</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token builtin">super</span><span class="token punctuation">(</span>Model<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span><span class="token builtin">input</span> <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>         x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>         x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>         x <span class="token operator">=</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                  <span class="token keyword">return</span> x  net1_model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span> net1_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net1_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>  <span class="token comment">#batch为 1024 时</span> <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     train_model<span class="token punctuation">(</span>net1_model<span class="token punctuation">,</span>sample_train<span class="token punctuation">,</span>sample_test<span class="token punctuation">,</span>batch_big<span class="token punctuation">,</span>txs_train<span class="token punctuation">,</span>tys_train<span class="token punctuation">,</span>txs_test<span class="token punctuation">,</span>tys_test<span class="token punctuation">,</span>optimizer<span class="token punctuation">,</span>loss_function<span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>device<span class="token punctuation">)</span> </code></pre> <h2> <a id="_182" rel="nofollow"></a>结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/1731502a0b030e11991388e399c4fbd4.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <pre><code class="prism language-python"><span class="token comment">#采用TensorDataset()和DataLoader()封装数据</span> x_train_td <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>txs_train<span class="token punctuation">,</span>tys_train<span class="token punctuation">)</span> x_train_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>x_train_td<span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batch<span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  x_test_td <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>txs_test<span class="token punctuation">,</span>tys_test<span class="token punctuation">)</span> x_test_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>x_test_td<span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batch<span class="token punctuation">)</span>  net2_model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span> net2_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net2_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>  <span class="token comment">#训练批次为64，测试批次为全部数据 </span> <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">for</span> data<span class="token punctuation">,</span>label <span class="token keyword">in</span> x_train_dl<span class="token punctuation">:</span>         data<span class="token punctuation">,</span>label <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         out <span class="token operator">=</span> net2_model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>         loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>out<span class="token punctuation">,</span>label<span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>         loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"split_loss:"</span><span class="token punctuation">,</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         txs_train<span class="token punctuation">,</span> tys_train <span class="token operator">=</span> txs_train<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> tys_train<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         txs_test<span class="token punctuation">,</span> tys_test <span class="token operator">=</span> txs_test<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> tys_test<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         train_all_loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>net2_model<span class="token punctuation">(</span>txs_train<span class="token punctuation">)</span><span class="token punctuation">,</span>tys_train<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         test_all_loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>net2_model<span class="token punctuation">(</span>txs_test<span class="token punctuation">)</span><span class="token punctuation">,</span>tys_test<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch:{},train_mse:{:.4f},test_mse:{:.4f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span>train_all_loss<span class="token punctuation">,</span>test_all_loss<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_215" rel="nofollow"></a>结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/80ed3cefbcb9ce62077d905ffd599c7b.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <pre><code class="prism language-python">net3_model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span> net3_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net3_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span> <span class="token comment">#训练批次为64，测试批次为64 </span> <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     times <span class="token operator">=</span> <span class="token number">0.0</span>     train_all_loss <span class="token operator">=</span> <span class="token number">0.0</span>     <span class="token keyword">for</span> datas<span class="token punctuation">,</span>labels <span class="token keyword">in</span> x_train_dl<span class="token punctuation">:</span>         times <span class="token operator">+=</span> <span class="token number">1</span>         datas<span class="token punctuation">,</span>labels <span class="token operator">=</span> datas<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span>labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         train_out <span class="token operator">=</span> net3_model<span class="token punctuation">(</span>datas<span class="token punctuation">)</span>         train_loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>train_out<span class="token punctuation">,</span>labels<span class="token punctuation">)</span>         train_all_loss <span class="token operator">+=</span> train_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>         train_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"split_loss:"</span><span class="token punctuation">,</span>train_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         time <span class="token operator">=</span> <span class="token number">0.0</span>         test_all_loss <span class="token operator">=</span> <span class="token number">0.0</span>         <span class="token keyword">for</span> data<span class="token punctuation">,</span>label <span class="token keyword">in</span> x_test_dl<span class="token punctuation">:</span>             time <span class="token operator">+=</span> <span class="token number">1</span>             data<span class="token punctuation">,</span>label <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>             test_out <span class="token operator">=</span> net3_model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>             test_loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>test_out<span class="token punctuation">,</span>label<span class="token punctuation">)</span>             test_all_loss <span class="token operator">+=</span> test_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch:{},train_mse:{:.4f},test_mse:{:.4f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span>train_all_loss<span class="token operator">/</span>times<span class="token punctuation">,</span>test_all_loss<span class="token operator">/</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_248" rel="nofollow"></a>结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/eb52b3eb983a27fc27fca17dbb7317f6.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"><br /> 最终可发现：批次越小整体均方误差越小；训练批次和测试批次相同或不同对整体均方误差的影响不大。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-26291.htm">动物注射疫苗,最佳的用药方法是静脉注射()（动物注射给药的方法）</a></p>
                                        <p>下一个：<a href="/news/article-26770.htm">家有宠物不能养的植物（养宠物不能养什么花）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-30-node-share.htm" title="「10月30日」最高速度21.7M/S，2024年Netch Github每天更新免费机场订阅节点链接">「10月30日」最高速度21.7M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-23987.htm" title="C++ STL 中的数值算法示例讲解_C 语言">C++ STL 中的数值算法示例讲解_C 语言</a></li>
                        <li class="py-2"><a href="/news/article-21232.htm" title="动物疫苗多少钱打一次针啊（小动物打疫苗多少钱一只）">动物疫苗多少钱打一次针啊（小动物打疫苗多少钱一只）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-9-free-node-subscribe-links.htm" title="「9月9日」最高速度18.1M/S，2024年Netch Github每天更新免费机场订阅节点链接">「9月9日」最高速度18.1M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-22-free-node-subscribe-links.htm" title="「10月22日」最高速度21.1M/S，2024年Netch Github每天更新免费机场订阅节点链接">「10月22日」最高速度21.1M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-30-netch-node.htm" title="「8月30日」最高速度22.1M/S，2024年Netch Github每天更新免费机场订阅节点链接">「8月30日」最高速度22.1M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-26289.htm" title="java基础面试题">java基础面试题</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-8-netch-node.htm" title="「10月8日」最高速度18.2M/S，2024年Netch Github每天更新免费机场订阅节点链接">「10月8日」最高速度18.2M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-22151.htm" title="开个宠物店大概需要多少钱（现在开宠物店前景好吗）">开个宠物店大概需要多少钱（现在开宠物店前景好吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-4-linux-netch-node.htm" title="「9月4日」最高速度21.4M/S，2024年Netch Github每天更新免费机场订阅节点链接">「9月4日」最高速度21.4M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">13</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- We Create End -->
    </main>
        <footer>
        <!-- Footer Start-->
        <div class="footer-main" data-background="assets/img/shape/footer_bg.png">
            <!-- footer-bottom aera -->
            <div class="footer-bottom-area footer-bg">
                <div class="container">
                    <div class="footer-border">
                        <div class="row d-flex align-items-center">
                            <div class="col-xl-12 ">
                                <div class="footer-copy-right text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                    <p>
                                        Netch Github节点订阅官网 版权所有
                                        <br />
                                        Powered by WordPress
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End-->
    </footer>
    <!-- JS here -->
    <!-- All JS Custom Plugins Link Here here -->
    <script src="/assets/website/js/frontend/netchgithub/vendor/modernizr-3.5.0.min.js"></script>
    <!-- Jquery, Popper, Bootstrap -->
    <script src="/assets/website/js/frontend/netchgithub/vendor/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/popper.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/bootstrap.min.js"></script>
    <!-- Jquery Mobile Menu -->
    <script src="/assets/website/js/frontend/netchgithub/jquery.slicknav.min.js"></script>
    <!-- Jquery Slick , Owl-Carousel Plugins -->
    <script src="/assets/website/js/frontend/netchgithub/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/slick.min.js"></script>
    <!-- Date Picker -->
    <script src="/assets/website/js/frontend/netchgithub/gijgo.min.js"></script>
    <!-- One Page, Animated-HeadLin -->
    <script src="/assets/website/js/frontend/netchgithub/wow.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/animated.headline.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.magnific-popup.js"></script>
    <!-- Scrollup, nice-select, sticky -->
    <script src="/assets/website/js/frontend/netchgithub/jquery.scrollUp.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.sticky.js"></script>
    <!-- contact js -->
    <script src="/assets/website/js/frontend/netchgithub/contact.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.validate.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/mail-script.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.ajaxchimp.min.js"></script>
    <!-- Jquery Plugins, main Jquery -->
    <script src="/assets/website/js/frontend/netchgithub/plugins.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>