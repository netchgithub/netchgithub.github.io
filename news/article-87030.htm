<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://netchgithub.github.io/news/article-87030.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Java线程池深入浅出</title>
        <meta name="description" content="Java线程池深入浅出  ThreadPoolExecutor使用 前言 一、技术介绍   1.线程池是什么？   二、使用步骤   1.ThreadPoolExecutor参数介绍 2.newSin" />
        <link rel="icon" href="/assets/website/img/netchgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Netch Github节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://netchgithub.github.io/news/article-87030.htm" />
    <meta property="og:site_name" content="Netch Github节点订阅官网" />
    <meta property="og:title" content="Java线程池深入浅出" />
    <meta property="og:image" content="https://netchgithub.github.io/uploads/20240819-2/524c4c6f10babc8794f493b9798cdebd.webp" />
        <meta property="og:release_date" content="2025-04-02T07:45:48" />
    <meta property="og:updated_time" content="2025-04-02T07:45:48" />
        <meta property="og:description" content="Java线程池深入浅出  ThreadPoolExecutor使用 前言 一、技术介绍   1.线程池是什么？   二、使用步骤   1.ThreadPoolExecutor参数介绍 2.newSin" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="manifest" href="site.webmanifest">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java线程池深入浅出">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- CSS here -->
    <link rel="stylesheet" href="/assets/website/css/netchgithub/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/slicknav.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/themify-icons.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/slick.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/nice-select.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-WPZ6L4HTT1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-WPZ6L4HTT1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Preloader Start -->
    <div id="preloader-active">
        <div class="preloader d-flex align-items-center justify-content-center">
            <div class="preloader-inner position-relative">
                <div class="preloader-circle"></div>
                <div class="preloader-img pere-text">
                    <img src="/assets/website/img/netchgithub/logo/logo.png" alt="">
                </div>
            </div>
        </div>
    </div>
    <!-- Preloader Start -->
    <header>
        <!-- Header Start -->
        <div class="header-area header-transparrent ">
            <div class="main-header header-sticky">
                <div class="container">
                    <div class="row align-items-center">
                        <!-- Logo -->
                        <div class="col-md-4">
                            <div class="logo">
                                <a href="/">
                                                                <span>Netch Github</span>
                                                                </a>
                            </div>
                        </div>
                        <div class="col-xl-8 col-lg-8 col-md-8">
                            <!-- Main-menu -->
                            <div class="main-menu f-right d-none d-lg-block">
                                <nav>
                                    <ul id="navigation">
                                                                                <li><a href="/"> 首页</a></li>
                                                                                <li><a href="/free-nodes/"> 免费节点</a></li>
                                                                                <li><a href="/paid-subscribe/"> 推荐机场</a></li>
                                                                                <li><a href="/client.htm"> 客户端</a></li>
                                                                                <li><a href="/news/"> 新闻资讯</a></li>
                                                                            </ul>
                                </nav>
                            </div>
                        </div>
                        <!-- Mobile Menu -->
                        <div class="col-12">
                            <div class="mobile_menu d-block d-lg-none"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Header End -->
    </header>
    <main>
        <!-- Slider Area Start-->
        <div class="services-area">
            <div class="container">
                <!-- Section-tittle -->
                <div class="row d-flex justify-content-center">
                    <div class="col-lg-8">
                        <div class="section-tittle text-center mb-80">
                            <h1>Java线程池深入浅出</h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Slider Area End-->
        <!-- We Create Start -->
        <div class="we-create-area create-padding">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>Java线程池深入浅出</h3> <ul> <li><a href="#ThreadPoolExecutor_4" rel="nofollow">ThreadPoolExecutor使用</a></li> <li><a href="#_11" rel="nofollow">前言</a></li> <li><a href="#_20" rel="nofollow">一、技术介绍</a></li> <li> <ul> <li><a href="#1_22" rel="nofollow">1.线程池是什么？</a></li> </ul> </li> <li><a href="#_31" rel="nofollow">二、使用步骤</a></li> <li> <ul> <li><a href="#1ThreadPoolExecutor_32" rel="nofollow">1.ThreadPoolExecutor参数介绍</a></li> <li><a href="#2newSingleThreadExecutor_52" rel="nofollow">2.newSingleThreadExecutor使用</a></li> <li><a href="#3newFixedThreadPool_103" rel="nofollow">3.newFixedThreadPool使用</a></li> <li><a href="#4newCachedThreadPool_144" rel="nofollow">4.newCachedThreadPool使用</a></li> <li><a href="#5_183" rel="nofollow">5.线程池的使用推荐</a></li> </ul> </li> <li><a href="#_197" rel="nofollow">作者寄语</a></li> </ul> </div> </h1> <p><font color="#999AAA">提示：如有疑问请私信联系、下方有源代码地址，请自行拿取</font></p> <hr color="#000000" size="1&quot;"/> </h1> <p><font color="#999AAA"> ThreadPoolExecutor是JDK1.5之后才有的线程池类，JDK帮我们实现了基于ThreadPoolExecutor创建的newSingleThreadExecutor、newFixedThreadPool、newCachedThreadPool等方便使用的线程池，那么为什么这些线程池在阿里巴巴的开发规范中却不推荐使用呢？</font> 我相信读了这篇文章后你将豁然开朗。 </p> <hr color="#000000" size="1&quot;"/> <p><font color="#999AAA">提示：以下是本篇文章正文内容，下面案例可供参考</font></p> </h1> <h2> <a id="1_22" rel="nofollow"></a>1.线程池是什么？</h2> <p><font color="#999AAA"> 线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件）,则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。 ---摘自百度百科 </font></p> </h1> <h2> <a id="1ThreadPoolExecutor_32" rel="nofollow"></a>1.ThreadPoolExecutor参数介绍</h2> <table> <thead> <tr> <th>参数名称</th> <th>参数类型</th> <th>参数含义</th> </tr> </thead> <tbody> <tr> <td>corePoolSize</td> <td>int</td> <td>核心线程池大小</td> </tr> <tr> <td>maximumPoolSize</td> <td>int</td> <td>最大线程池大小</td> </tr> <tr> <td>keepAliveTime</td> <td>long</td> <td>线程最大空闲时间</td> </tr> <tr> <td>unit</td> <td>TimeUnit</td> <td>时间单位</td> </tr> <tr> <td>workQueue</td> <td>BlockingQueue</td> <td>线程等待队列</td> </tr> <tr> <td>threadFactory</td> <td>ThreadFactory</td> <td>线程创建工厂</td> </tr> <tr> <td>handler</td> <td>RejectedExecutionHandler</td> <td>拒绝策略</td> </tr> </tbody> </table> <p>我们看下ThreadPoolExecutor类的execute方法底层源码进行分析<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/f177fab662d3c707769aede9041ee801.jpg" alt="Java线程池深入浅出"><br /> OK，根据判断可知：</p> <p>1.如果正在运行的线程少于corePoolSize线程，请尝试使用给定命令作为其第一个任务启动一个新线程。</p> <p>2.如果任务可以成功排队，那么我们仍然需要再次检查是否应该添加线程（因为现有线程自上次检查后就死掉了），或者自进入此方法后该池已关闭。因此，我们重新检查状态，并在必要时回滚排队，如果停止，或者如果没有线程，则启动一个新线程。</p> <p>3.如果我们无法将任务排队，则尝试添加一个新线程。如果失败，我们知道我们已关闭或处于饱和状态，因此拒绝该任务。</p> <h2> <a id="2newSingleThreadExecutor_52" rel="nofollow"></a>2.newSingleThreadExecutor使用</h2> <p><font color="#999AAA">代码如下（示例）：</font></p> <pre><code class="prism language-c">	@Test     public <span class="token keyword">void</span> <span class="token function">testNewSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         ExecutorService threaPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池执行开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>idx <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             threaPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{<!-- --></span>                 try <span class="token punctuation">{<!-- --></span>                     LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程执行中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException interruptedException<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                     interruptedException<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         threaPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>threaPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池执行结束，总用时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ms "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>  </code></pre> <p><font color="#999AAA">此测试方法运行的结果如下：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/7cd9919a37da659cf2ce894aa7c1cdbe.jpg" alt="Java线程池深入浅出">注意看我用红框标记的地方，只采用了1个线程去执行，原理是什么呢？让我们看看newSingleThreadExecutor的源码</font></p> <pre><code class="prism language-c">	public <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> new FinalizableDelegatedExecutorService             <span class="token punctuation">(</span>new <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                     <span class="token number">0L</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                     new LinkedBlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  </code></pre> <p>构建了ThreadPoolExecutor线程池，核心线程1个，最大执行线程1个，等待队列是LinkedBlockingQueue，咱们再点进去看看LinkedBlockingQueue默认构造函数是啥<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/43c7a3e7fa19106587797192cdf5fa89.jpg" alt="Java线程池深入浅出"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/4bdd28e778bed88cc7107e4fbea392ac.jpg" alt="Java线程池深入浅出"><br /> 可以看到这是默认时一个容量为Interger.MAX_VALUE的队列</p> <p>结论：newSingleThreadExecutor是一个核心线程为1，线程池中允许最大线程为1，等待队列为无限大的线程池，所以你应该知道为什么它只开了一个线程去执行了。</p> <h2> <a id="3newFixedThreadPool_103" rel="nofollow"></a>3.newFixedThreadPool使用</h2> <p><font color="#999AAA">代码如下（示例）：</font></p> <pre><code class="prism language-c"> 	@Test     public <span class="token keyword">void</span> <span class="token function">testNewFixedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       	ExecutorService threaPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池执行开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>idx <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             threaPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{<!-- --></span>                 try <span class="token punctuation">{<!-- --></span>                     LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程执行中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException interruptedException<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                     interruptedException<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         threaPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>threaPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池执行结束，总用时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ms "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  </code></pre> <p>先来看下执行结果</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/8bbb501cb941c61c6fa11350f4a1a2d4.jpg" alt="Java线程池深入浅出"><br /> OK,看下执行结果可知，只开启了5个线程,每次批量的执行5个,接下来咱们看看它的源码<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/1c2a9c54a2617aefc2ffe7a5bf888710.jpg" alt="Java线程池深入浅出"><br /> 也同样的构造了ThreadPoolExecutor线程池，参数为：核心线程数、线程池最大线程数都为传入的参数，单元测试传的是5，所以开5个线程运行，运行完重复使用这5个线程去执行队列中的。</p> <p>结论：newFixedThreadPool是一个根据传入参数来执行固定大小的线程池</p> <h2> <a id="4newCachedThreadPool_144" rel="nofollow"></a>4.newCachedThreadPool使用</h2> <p><font color="#999AAA">代码如下（示例）：</font></p> <pre><code class="prism language-c">	@Test     public <span class="token keyword">void</span> <span class="token function">testNewCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         ExecutorService threaPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池执行开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>idx <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             threaPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{<!-- --></span>                     LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程执行中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         threaPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>threaPool<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池执行结束，总用时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ms "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  </code></pre> <p>OK，这里跟上面不同，咱们执行200个线程，咋们先看执行结果，<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/0d708c690cfd54c1e8a7a027ac5b0f8f.jpg" alt="Java线程池深入浅出"><br /> 很明显可以看到跟上面的不同，在执行时间很短的任务时重复的利用线程去执行，原因是什么呢？咱们先看源码<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/49dd1bbf7cb62ece6d59c14ef1f0771b.jpg" alt="Java线程池深入浅出"><br /> 创建了一个核心线程数为0，最大执行线程为Interger.MAX_VALUE，并且注意这里用了SynchronousQueue这个队列，SynchronousQueue没有容量，是无缓冲等待队列，是一个不存储元素的阻塞队列，会直接将任务交给消费者，必须等队列中的添加元素被消费后才能继续添加新的元素。</p> <p>SynchronousQueue，至于它的底层原理后期会写一篇专门关于队列的文章，这里不再细说</p> <p>结论：newCachedThreadPool它是一个可以无限扩大的线程池，当前没有空闲线程时它会创建一个新的线程，如果有空闲线程会使用空闲线程处理</p> <h2> <a id="5_183" rel="nofollow"></a>5.线程池的使用推荐</h2> <p>通过以上的测试案例与源码分析，相信大家对线程池有了一定的认识，总结如下：</p> <p>1.newSingleThreadExecutor：只开启一个线程运行，处理效率较慢，阻塞队列大小是没有大小限制的，如果队列堆积数据太多会造成资源消耗</p> <p>2.newFixedThreadPool：一个固定大小的线程池，可控制线程并发数量，但阻塞队列大小是没有大小限制的，如果队列堆积数据太多会造成资源消耗</p> <p>3.newCachedThreadPool：比较适合处理执行时间较短的业务，但线程若是无限制的创建，可能会导致内存占用过多而产生OOM，并且会造成cpu过度切换消耗太多资源。</p> <p><font color="#999AAA">所以使用推荐是根据业务场景实现自定义ThreadPoolExecutor，特别是高并发大流量系统，这也是为什么阿里内部不推荐使用以上几种线程池的原因。</font></p> </h1> <p><font color="#999AAA">是不是感觉很简单？更多用法请点击下方查看源码,关注我带你揭秘更多高级用法</font></p> <p>源码地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/kobeboy/hyh-boot.git"  rel="nofollow">点此查看源码</a>.</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-86324.htm">动物医院有限公司官网招聘 动物医院有限公司官网招聘信息</a></p>
                                        <p>下一个：<a href="/news/article-87031.htm">Logback及其MDC功能详解</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-78575.htm" title="动物疫苗研制步骤 动物疫苗研制步骤">动物疫苗研制步骤 动物疫苗研制步骤</a></li>
                        <li class="py-2"><a href="/news/article-70485.htm" title="动物医院工作时间（动物医院工作时间安排）">动物医院工作时间（动物医院工作时间安排）</a></li>
                        <li class="py-2"><a href="/news/article-82727.htm" title="动物医院法定条件不包括（动物医院法定条件不包括哪些）">动物医院法定条件不包括（动物医院法定条件不包括哪些）</a></li>
                        <li class="py-2"><a href="/news/article-80623.htm" title="动物疫苗证书图片（动物注射疫苗证明）">动物疫苗证书图片（动物注射疫苗证明）</a></li>
                        <li class="py-2"><a href="/news/article-75825.htm" title="动物疫苗注射方法有几种图片 动物疫苗注射方法有几种图片大全">动物疫苗注射方法有几种图片 动物疫苗注射方法有几种图片大全</a></li>
                        <li class="py-2"><a href="/news/article-83466.htm" title="一片枫叶一片红什么意思（一片枫叶一片红什么意思呀）">一片枫叶一片红什么意思（一片枫叶一片红什么意思呀）</a></li>
                        <li class="py-2"><a href="/news/article-77200.htm" title="梦见抱别人的女人睡觉好不好（做梦梦到抱别的女人）">梦见抱别人的女人睡觉好不好（做梦梦到抱别的女人）</a></li>
                        <li class="py-2"><a href="/news/article-68544.htm" title="适合初学者的C语言字符串讲解_C 语言_">适合初学者的C语言字符串讲解_C 语言_</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-5-free-netch-node.htm" title="「3月5日」最高速度21.8M/S，2025年Netch每天更新免费机场订阅节点链接">「3月5日」最高速度21.8M/S，2025年Netch每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-77885.htm" title="动物医院管理制度及流程表（动物医院管理办法）">动物医院管理制度及流程表（动物医院管理办法）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- We Create End -->
    </main>
        <footer>
        <!-- Footer Start-->
        <div class="footer-main" data-background="assets/img/shape/footer_bg.png">
            <!-- footer-bottom aera -->
            <div class="footer-bottom-area footer-bg">
                <div class="container">
                    <div class="footer-border">
                        <div class="row d-flex align-items-center">
                            <div class="col-xl-12 ">
                                <div class="footer-copy-right text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                    <p>
                                        Netch Github节点订阅官网 版权所有
                                        <br />
                                        Powered by WordPress
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End-->
    </footer>
    <!-- JS here -->
    <!-- All JS Custom Plugins Link Here here -->
    <script src="/assets/website/js/frontend/netchgithub/vendor/modernizr-3.5.0.min.js"></script>
    <!-- Jquery, Popper, Bootstrap -->
    <script src="/assets/website/js/frontend/netchgithub/vendor/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/popper.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/bootstrap.min.js"></script>
    <!-- Jquery Mobile Menu -->
    <script src="/assets/website/js/frontend/netchgithub/jquery.slicknav.min.js"></script>
    <!-- Jquery Slick , Owl-Carousel Plugins -->
    <script src="/assets/website/js/frontend/netchgithub/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/slick.min.js"></script>
    <!-- Date Picker -->
    <script src="/assets/website/js/frontend/netchgithub/gijgo.min.js"></script>
    <!-- One Page, Animated-HeadLin -->
    <script src="/assets/website/js/frontend/netchgithub/wow.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/animated.headline.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.magnific-popup.js"></script>
    <!-- Scrollup, nice-select, sticky -->
    <script src="/assets/website/js/frontend/netchgithub/jquery.scrollUp.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.sticky.js"></script>
    <!-- contact js -->
    <script src="/assets/website/js/frontend/netchgithub/contact.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.validate.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/mail-script.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.ajaxchimp.min.js"></script>
    <!-- Jquery Plugins, main Jquery -->
    <script src="/assets/website/js/frontend/netchgithub/plugins.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>