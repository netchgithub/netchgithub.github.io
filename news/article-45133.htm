<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://netchgithub.github.io/news/article-45133.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>spring schedule 配置多任务动态 cron 【增删启停】</title>
        <meta name="description" content="一、背景 之前公司经常会遇到配置定时任务，简单的任务可以直接依赖spring。 简单任务直接使用 @scheduled 注解配合@EnableScheduling。 但是如何实现简单的动态cron呢？" />
        <link rel="icon" href="/assets/website/img/netchgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Netch Github节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://netchgithub.github.io/news/article-45133.htm" />
    <meta property="og:site_name" content="Netch Github节点订阅官网" />
    <meta property="og:title" content="spring schedule 配置多任务动态 cron 【增删启停】" />
    <meta property="og:image" content="https://netchgithub.github.io/uploads/20240819-2/2ca74ef2003cdead13b665c788066b22.webp" />
        <meta property="og:release_date" content="2025-01-23T10:41:37" />
    <meta property="og:updated_time" content="2025-01-23T10:41:37" />
        <meta property="og:description" content="一、背景 之前公司经常会遇到配置定时任务，简单的任务可以直接依赖spring。 简单任务直接使用 @scheduled 注解配合@EnableScheduling。 但是如何实现简单的动态cron呢？" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="manifest" href="site.webmanifest">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="spring schedule 配置多任务动态 cron 【增删启停】">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- CSS here -->
    <link rel="stylesheet" href="/assets/website/css/netchgithub/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/slicknav.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/themify-icons.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/slick.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/nice-select.css">
    <link rel="stylesheet" href="/assets/website/css/netchgithub/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-WPZ6L4HTT1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-WPZ6L4HTT1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Preloader Start -->
    <div id="preloader-active">
        <div class="preloader d-flex align-items-center justify-content-center">
            <div class="preloader-inner position-relative">
                <div class="preloader-circle"></div>
                <div class="preloader-img pere-text">
                    <img src="/assets/website/img/netchgithub/logo/logo.png" alt="">
                </div>
            </div>
        </div>
    </div>
    <!-- Preloader Start -->
    <header>
        <!-- Header Start -->
        <div class="header-area header-transparrent ">
            <div class="main-header header-sticky">
                <div class="container">
                    <div class="row align-items-center">
                        <!-- Logo -->
                        <div class="col-md-4">
                            <div class="logo">
                                                                <a href="/">
                                    <span>Netch Github</span>
                                </a>
                                                            </div>
                        </div>
                        <div class="col-xl-8 col-lg-8 col-md-8">
                            <!-- Main-menu -->
                            <div class="main-menu f-right d-none d-lg-block">
                                <nav>
                                    <ul id="navigation">
                                                                                <li><a href="/"> 首页</a></li>
                                                                                <li><a href="/free-nodes/"> 免费节点</a></li>
                                                                                <li><a href="/paid-subscribe/"> 推荐机场</a></li>
                                                                                <li><a href="/news/"> 新闻资讯</a></li>
                                                                                <li><a href="#">关于</a></li>
                                        <li><a href="#">联系</a></li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                        <!-- Mobile Menu -->
                        <div class="col-12">
                            <div class="mobile_menu d-block d-lg-none"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Header End -->
    </header>
    <main>
        <!-- Slider Area Start-->
        <div class="services-area">
            <div class="container">
                <!-- Section-tittle -->
                <div class="row d-flex justify-content-center">
                    <div class="col-lg-8">
                        <div class="section-tittle text-center mb-80">
                            <h1>spring schedule 配置多任务动态 cron 【增删启停】</h1>
                            <p>
                                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Slider Area End-->
        <!-- We Create Start -->
        <div class="we-create-area create-padding">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <h2 style="margin-left:0px;"><strong><span style="color:#000000;">一、背景</span></strong></h2> <p style="margin-left:0px;"><span style="color:#222222;">之前公司经常会遇到配置定时任务，简单的任务可以直接依赖spring。<br /> 简单任务直接使用 @scheduled 注解配合@EnableScheduling。<br /> 但是如何实现简单的动态cron呢？</span></p> <p style="margin-left:0px;"><span style="color:#222222;"><strong>开发原则：</strong><br /> 尽可能在项目本身去实现，少依赖第三方框架，避免项目过于臃肿和复杂。</span></p> <p style="margin-left:0px;"><span style="color:#222222;"><strong>俩种任务调度方式：</strong></span></p> <p style="margin-left:0px;"><span style="color:#222222;"><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads/20230108/d6b1524c7bae3ecac702dace8361e7d5.jpg"></span></p> <h2 style="margin-left:0px;"><strong><span style="color:#000000;"><a name="t1" rel="nofollow"></a><a id="_12" rel="nofollow"></a>二、本篇说明</span></strong></h2> <p style="margin-left:0px;"><span style="color:#222222;">springBoot 基础模块 spring-boot-starter-web 已经内置 schedule ，无需引入额外依赖。<br /><span style="color:#FF0000;">先思考几个问题：</span></span></p> <p style="margin-left:0px;"><span style="color:#222222;">1、动态 cron 实现的原理</span></p> <p style="margin-left:0px;"><span style="color:#222222;">任务的 【 停止】是基于 future接口 的cancel() 方法。<br /> 任务的 【增加、删除、启动】是基于 注册到 类ScheduledTaskRegistrar 的 ScheduledFuture的数量。<br /> 涉及核心类：</span></p> <ul style="margin-left:0px;"> <li>ScheduledFuture</li> <li>SchedulingConfigurer</li> <li>ScheduledTaskRegistrar</li> </ul> <p style="margin-left:0px;"><span style="color:#222222;">2、多任务并行执行配置<br /> spring默认机制对schedule是单线程，需要配置多线程并行执行。</span></p> <p style="margin-left:0px;"><span style="color:#222222;">3、如何配置多个任务<br /> 好多博文，都是配置一个cron，这让初学者很难受。</span></p> <p style="margin-left:0px;"><span style="color:#222222;">4、如何配置任务分组<br /> 根据自己业务背景，可根据步骤三，进行改造。</span></p> <p style="margin-left:0px;"><span style="color:#222222;">5、如何配置服务启动自启任务。<br /> 想要程序启动时首次去加我们设置的task，只需实现 CommandLineRunner 即可。</span></p> <p style="margin-left:0px;"><span style="color:#222222;">6、如何从数据库读取配置<br /> 这个其实很简单，在实现 ScheduledTaskRegistrar 时，先直接查询我们需要的数据即可。</span></p> <p style="margin-left:0px;"><span style="color:#222222;">7、如何优雅的实现我们的代码<br /> 这里为了我们多个task实现时，去除臃肿的if else ，使用策略模式去实现我们的task，这里代码里面会具体介绍。<br /> 参考类图：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads/20230108/4b8326900cc7b4a7fed701b0d3963fe3.jpg"></span></p> <p style="margin-left:0px;"><span style="color:#222222;">8、如何去触发我们的schedule 【增删启停】<br /> 配置好 task任务类，注入到 controller ，通过接口直接调用即可。</span></p> <h2 style="margin-left:0px;"><strong><span style="color:#000000;"><a name="t2" rel="nofollow"></a><a id="_48" rel="nofollow"></a>三、代码实现</span></strong></h2> <p style="margin-left:0px;"><span style="color:#222222;">先贴出我的github 代码，下面代码可能描述不全。</span></p> <ul style="margin-left:0px;"> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/tianliuzhen/boot-devs/tree/master/schedule/src/main/java/com/aaa/schedule/scheduling"  rel="nofollow">普通多任务动态cron</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/tianliuzhen/boot-devs/tree/master/schedule/src/main/java/com/aaa/schedule/scheduling2"  rel="nofollow">分组多任务动态cron</a></li> </ul> <h3 style="margin-left:0px;"><strong><span style="color:#000000;"><a name="t3" rel="nofollow"></a><a id="1_cron__54" rel="nofollow"></a>1. 普通多任务动态cron 实现</span></strong></h3> <p><strong><span style="color:#000000;"><a id="11__TaskEntity_55" rel="nofollow"></a>1.1 对应数据库的实体类 TaskEntity</span></strong></p> <pre class="has" style="margin-left:0px;"><code class="language-prettyprint language-java">@Data @AllArgsConstructor @NoArgsConstructor public class TaskEntity {     /**      * 任务id      */     private int taskId;     /**      * 任务说明      */     private String desc;     /**      * cron 表达式      */     private String expression; } </code></pre> <p>&nbsp;</p> <p><strong><span style="color:#000000;"><a id="12__75" rel="nofollow"></a>1.2 配置每个任务实现</span></strong></p> <p style="margin-left:0px;"><span style="color:#222222;">配置任务接口 TaskService</span></p> <pre class="has" style="margin-left:0px;"><code class="language-prettyprint language-java">public interface TaskService {      void HandlerJob();      Integer jobId();  } </code></pre> <p>&nbsp;</p> <p style="margin-left:0px;"><span style="color:#222222;">配置任务接口实现 TaskServiceJob1Impl、TaskServiceJob2Impl …</span></p> <pre class="has" style="margin-left:0px;"><code class="language-prettyprint language-java">@Service public class TaskServiceJob1Impl implements TaskService {     @Override     public void HandlerJob() {         System.out.println("------job1 开始执行---------："+new Date());          System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "    " + Thread.currentThread().getName() + "    任务一启动");         try {             Thread.sleep(10000);//任务耗时10秒         } catch (InterruptedException e) {             e.printStackTrace();         }         System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + "    " + Thread.currentThread().getName() + "    结束");      }      @Override     public Integer jobId() {         return 1;     } } </code></pre> <p>&nbsp;</p> <p><strong><span style="color:#000000;"><a id="13__TaskSolverChooser_115" rel="nofollow"></a>1.3 配置任务解析器 TaskSolverChooser</span></strong></p> <p style="margin-left:0px;"><span style="color:#222222;"><strong>注：</strong><br /> 这里引入策略模式<br /><strong>为啥要配置 任务解析器选择器:</strong><br /> 因为我们实现多个任务时，一个任务对应一个 CronTask，需要在 MyScheduledTask 里面去实现我们每一个方法。<br /> 譬如，我们有100个任务就要自定义100个任务实现方法，代码会很臃肿，明显不符合，【开闭原则】，于是这里采用策略模式，解耦我们多个任务业务实现逻辑。</span></p> <pre class="has" style="margin-left:0px;"><code class="language-prettyprint language-java">@Slf4j @Component public class TaskSolverChooser implements ApplicationContextAware {      private ApplicationContext applicationContext;      private Map&lt;Integer, TaskService&gt; chooseMap = new HashMap&lt;&gt;(16);      /**      * 拿到spring context 上下文      */     @Override     public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {         this.applicationContext = applicationContext;     }      @PostConstruct     private void registerToTaskSolver(){         Map&lt;String, TaskService&gt; taskServiceMap = applicationContext.getBeansOfType(TaskService.class);         for (TaskService value : taskServiceMap.values()) {             chooseMap.put(value.jobId(), value);             log.info("task {} 处理器: {} 注册成功",new Object[]{value.jobId(),value});         }     }      /**      * 获取需要的job      */     public TaskService getTask(Integer jobId){         return chooseMap.get(jobId);     } } </code></pre> <p>&nbsp;</p> <p><strong><span style="color:#000000;"><a id="14__MyScheduledTask_cron_155" rel="nofollow"></a>1.4 配置MyScheduledTask （动态cron核心配置）</span></strong></p> <p style="margin-left:0px;"><span style="color:#222222;"><strong>说明：</strong><br /> 1、配置多线程执行任务<br /> 2、配置 刷新 task<br /> 3、配置 停止 task<br /> 4、配置 执行task 业务逻辑</span></p> <pre class="has" style="margin-left:0px;"><code class="language-prettyprint language-java">@Component public class MyScheduledTask implements SchedulingConfigurer {      private volatile ScheduledTaskRegistrar registrar;      private final ConcurrentHashMap&lt;Integer, ScheduledFuture&lt;?&gt;&gt; scheduledFutures = new ConcurrentHashMap&lt;&gt;();     private final ConcurrentHashMap&lt;Integer, CronTask&gt; cronTasks = new ConcurrentHashMap&lt;&gt;();      @Autowired     private TaskSolverChooser taskSolverChooser;      @Override     public void configureTasks(ScheduledTaskRegistrar registrar) {          //设置20个线程,默认单线程,如果不设置的话，不能同时并发执行任务         registrar.setScheduler(Executors.newScheduledThreadPool(10));         this.registrar = registrar;     }      /**      * 修改 cron 需要 调用该方法      */     public void refresh(List&lt;TaskEntity&gt; tasks){         //取消已经删除的策略任务         Set&lt;Integer&gt; sids = scheduledFutures.keySet();         for (Integer sid : sids) {             if(!exists(tasks, sid)){                 scheduledFutures.get(sid).cancel(false);             }         }         for (TaskEntity TaskEntity : tasks) {             String expression = TaskEntity.getExpression();             //计划任务表达式为空则跳过             if(!StringUtils.hasLength(expression)){                 continue;             }             //计划任务已存在并且表达式未发生变化则跳过             if (scheduledFutures.containsKey(TaskEntity.getTaskId())                     &amp;&amp; cronTasks.get(TaskEntity.getTaskId()).getExpression().equals(expression)) {                 continue;             }             //如果策略执行时间发生了变化，则取消当前策略的任务             if(scheduledFutures.containsKey(TaskEntity.getTaskId())){                 scheduledFutures.get(TaskEntity.getTaskId()).cancel(false);                 scheduledFutures.remove(TaskEntity.getTaskId());                 cronTasks.remove(TaskEntity.getTaskId());             }             //业务逻辑处理             CronTask task = cronTask(TaskEntity, expression);               //执行业务             ScheduledFuture&lt;?&gt; future = registrar.getScheduler().schedule(task.getRunnable(), task.getTrigger());             cronTasks.put(TaskEntity.getTaskId(), task);             scheduledFutures.put(TaskEntity.getTaskId(), future);         }     }      /**      * 停止 cron 运行      */     public void stop(List&lt;TaskEntity&gt; tasks){         tasks.forEach(item-&gt;{             if (scheduledFutures.containsKey(item.getTaskId())) {                 // mayInterruptIfRunning设成false话，不允许在线程运行时中断，设成true的话就允许。                 scheduledFutures.get(item.getTaskId()).cancel(false);                 scheduledFutures.remove(item.getTaskId());             }         });     }      /**      * 业务逻辑处理      */     public CronTask cronTask(TaskEntity TaskEntity, String expression)  {         return new CronTask(() -&gt; {                     //每个计划任务实际需要执行的具体业务逻辑                     //采用策略，模式 ，执行我们的job                    taskSolverChooser.getTask(TaskEntity.getTaskId()).HandlerJob();                 }, expression);     }      private boolean exists(List&lt;TaskEntity&gt; tasks, Integer tid){         for(TaskEntity TaskEntity:tasks){             if(TaskEntity.getTaskId() == tid){                 return true;             }         }         return false;     }      @PreDestroy     public void destroy() {         this.registrar.destroy();     }  } </code></pre> <p>&nbsp;</p> <p><strong><span style="color:#000000;"><a id="15_task_261" rel="nofollow"></a>1.5 配置程序启动时首次去加我们设置的task</span></strong></p> <pre class="has" style="margin-left:0px;"><code class="language-prettyprint language-java">@Component public class StartInitTask implements CommandLineRunner {      @Autowired     private MyScheduledTask myScheduledTask;      @Override     public void run(String... args) throws Exception {         List&lt;TaskEntity&gt; list = Arrays.asList(                 new TaskEntity(1, "测试1", "0/1 * *  * * ?"),                 new TaskEntity(2, "测试2", "0/1 * *  * * ?")         );         myScheduledTask.refresh(list);     } } </code></pre> <p>&nbsp;</p> <p><strong><span style="color:#000000;"><a id="16_web_280" rel="nofollow"></a>1.6 配置web接口去触发，增删启停</span></strong></p> <pre class="has" style="margin-left:0px;"><code class="language-prettyprint language-java">@RestController public class StartController {      @Autowired     private MyScheduledTask scheduledTask;      @PostMapping(value = "/startOrChangeCron")     public String changeCron(@RequestBody List&lt;TaskEntity&gt; list){         if (CollectionUtils.isEmpty(list)) {             // 这里模拟存在数据库的数据             list = Arrays.asList(                     new TaskEntity(1, "测试1","0/1 * *  * * ?") ,                     new TaskEntity(2, "测试2","0/1 * *  * * ?")             );         }         scheduledTask.refresh(list);         return "task任务:" + list.toString() + "已经开始运行";     }      @PostMapping(value = "/stopCron")     public String stopCron(@RequestBody List&lt;TaskEntity&gt; list){         if (CollectionUtils.isEmpty(list)) {             // 这里模拟将要停止的cron可通过前端传来             list = Arrays.asList(                     new TaskEntity(1, "测试1","0/1 * *  * * ?") ,                     new TaskEntity(2, "测试2","0/1 * *  * * ?")             );         }         scheduledTask.stop(list);         List&lt;Integer&gt; collect = list.stream().map(TaskEntity::getTaskId).collect(Collectors.toList());         return "task任务:" + collect.toString() + "已经停止启动";     }  }  </code></pre> <p>&nbsp;</p> <h3 style="margin-left:0px;"><strong><span style="color:#000000;"><a name="t4" rel="nofollow"></a><a id="2_cron__319" rel="nofollow"></a>2. 分组多任务动态cron 实现</span></strong></h3> <p style="margin-left:0px;"><span style="color:#222222;"><strong>实现原理：</strong><br /> 基于反射实现，根据方法全类名，去动态执行方法。多任务分组配置，根据任务类型进行分组。<br /><strong>eg：</strong><br /> 定时任务人员的相关操作，有检测人员离职状态，人员业绩达标，人员考勤…等，<br /><strong>作用：</strong><br /> 对人员定时任务做一个分类，在同一个类里面去实现不同的task，<br /><strong>比较</strong><br /> 《1. 普通多任务动态cron 实现》，是一个类可以实现一个task<br /> 《2. 分组多任务动态cron 实现》，是一个类可以实现多个task<br /> 详细可参考：&nbsp;<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/tianliuzhen/boot-devs/tree/master/schedule/src/main/java/com/aaa/schedule/scheduling2"  rel="nofollow">分组多任务动态cron</a></span></p> <h3 style="margin-left:0px;"><strong><span style="color:#000000;"><a name="t5" rel="nofollow"></a><a id="3__332" rel="nofollow"></a>3 测试记录</span></strong></h3> <p style="margin-left:0px;"><span style="color:#222222;"><strong>测试1</strong>&nbsp;项目启动自启<br /> TaskServiceJob1Impl和TaskServiceJob1Impl … 设置 阻塞10s<br /> 观察日志时间可发现，已经同时并发执行俩个任务。<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads/20230108/54b4c06942b79a27ab6f99a0afa6957f.jpg"><br /><strong>测试2</strong>&nbsp;触发 刷新【增、删、启】我们的task，。<br /> 其实这里没这么智能，如果需要触发刷新接口，实际上是重新加载我们的task，就是对应触发我们，增加任务任务，删除任务，启动任务。<br /> 使用idea插件测试接口<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads/20230108/f1e757fb5fa7f6eb3492df4aa603e3e2.jpg"><br /> 观察日志<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads/20230108/9ae32937462ee4217db59cde9306ea7a.jpg"><br /><strong>测试3</strong>&nbsp;触发 停止接口，停止一个接口。<br /> 这里测试略过…</span></p> <h2 style="margin-left:0px;"><strong><span style="color:#000000;"><a name="t6" rel="nofollow"></a><a id="_346" rel="nofollow"></a>四、总结</span></strong></h2> <p style="margin-left:0px;"><span style="color:#222222;">其实实现简单的动态配置，以上代码可用，比较简单。</span></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-44651.htm">动物疫苗批号查询网址官网 动物疫苗批号查询网址官网入口</a></p>
                                        <p>下一个：<a href="/news/article-45134.htm">机器制作狗粮的配方大全图片（机器制作狗粮的配方大全图片高清）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-16-free-node-subscribe-links.htm" title="「11月16日」最高速度19.6M/S，2024年Netch Github每天更新免费机场订阅节点链接">「11月16日」最高速度19.6M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-43643.htm" title="动物疫苗接种方法视频教程全集（动物疫苗接种方法及注意事项）">动物疫苗接种方法视频教程全集（动物疫苗接种方法及注意事项）</a></li>
                        <li class="py-2"><a href="/news/article-23064.htm" title="被猫抓了一下红色划痕没破皮会得狂犬病吗（被猫抓了一下红色划痕没破皮会得狂犬病吗会传染吗）">被猫抓了一下红色划痕没破皮会得狂犬病吗（被猫抓了一下红色划痕没破皮会得狂犬病吗会传染吗）</a></li>
                        <li class="py-2"><a href="/news/article-37209.htm" title="怎么能考兽医证（怎么考兽医资格证需要什么条件）">怎么能考兽医证（怎么考兽医资格证需要什么条件）</a></li>
                        <li class="py-2"><a href="/news/article-35592.htm" title="美联众合动物医院加盟多少钱（美联众合动物医院总部在哪）">美联众合动物医院加盟多少钱（美联众合动物医院总部在哪）</a></li>
                        <li class="py-2"><a href="/news/article-28169.htm" title="HashMap中红黑树插入节点的调整过程分析_在线工具">HashMap中红黑树插入节点的调整过程分析_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-9-free-node-subscribe-links.htm" title="「12月9日」最高速度20.9M/S，2024年Netch Github每天更新免费机场订阅节点链接">「12月9日」最高速度20.9M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-33362.htm" title="动物接种疫苗的方法有哪些 动物接种疫苗的方法有哪些种类">动物接种疫苗的方法有哪些 动物接种疫苗的方法有哪些种类</a></li>
                        <li class="py-2"><a href="/news/article-41654.htm" title="领养宠物签的合同到底有用吗（领养宠物签的合同到底有用吗安全吗）">领养宠物签的合同到底有用吗（领养宠物签的合同到底有用吗安全吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-3-node-share.htm" title="「12月3日」最高速度22.3M/S，2024年Netch Github每天更新免费机场订阅节点链接">「12月3日」最高速度22.3M/S，2024年Netch Github每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- We Create End -->
    </main>
        <footer>
        <!-- Footer Start-->
        <div class="footer-main" data-background="assets/img/shape/footer_bg.png">
            <!-- footer-bottom aera -->
            <div class="footer-bottom-area footer-bg">
                <div class="container">
                    <div class="footer-border">
                        <div class="row d-flex align-items-center">
                            <div class="col-xl-12 ">
                                <div class="footer-copy-right text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                    <p>
                                        Netch Github节点订阅官网 版权所有
                                        <br />
                                        Powered by WordPress
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End-->
    </footer>
    <!-- JS here -->
    <!-- All JS Custom Plugins Link Here here -->
    <script src="/assets/website/js/frontend/netchgithub/vendor/modernizr-3.5.0.min.js"></script>
    <!-- Jquery, Popper, Bootstrap -->
    <script src="/assets/website/js/frontend/netchgithub/vendor/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/popper.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/bootstrap.min.js"></script>
    <!-- Jquery Mobile Menu -->
    <script src="/assets/website/js/frontend/netchgithub/jquery.slicknav.min.js"></script>
    <!-- Jquery Slick , Owl-Carousel Plugins -->
    <script src="/assets/website/js/frontend/netchgithub/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/slick.min.js"></script>
    <!-- Date Picker -->
    <script src="/assets/website/js/frontend/netchgithub/gijgo.min.js"></script>
    <!-- One Page, Animated-HeadLin -->
    <script src="/assets/website/js/frontend/netchgithub/wow.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/animated.headline.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.magnific-popup.js"></script>
    <!-- Scrollup, nice-select, sticky -->
    <script src="/assets/website/js/frontend/netchgithub/jquery.scrollUp.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.nice-select.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.sticky.js"></script>
    <!-- contact js -->
    <script src="/assets/website/js/frontend/netchgithub/contact.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.validate.min.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/mail-script.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/jquery.ajaxchimp.min.js"></script>
    <!-- Jquery Plugins, main Jquery -->
    <script src="/assets/website/js/frontend/netchgithub/plugins.js"></script>
    <script src="/assets/website/js/frontend/netchgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>